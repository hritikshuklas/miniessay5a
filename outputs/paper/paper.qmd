---
title: "Mini Essay 5a"
author: "Hritik Shukla"
date: today
format: pdf
editor: visual
thanks: "Code and data are available at: https://github.com/hritikshuklas/miniessay5a"
---

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false

library(xml2)
library(rvest)
library(janitor)
library(dplyr)
library(tidyverse)
library(knitr)
library(kableExtra)

cleaned_data <- read_csv("../data/cleaned_data.csv")
```

Getting HTML data and saving it locally

```{r}
#| echo: false

raw_data <- read_html("https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia")
write_html(raw_data, "pms.html")
```

Reading the locally saved HTML file into a tibble

```{r}
#| echo: false

raw_data <- read_html("pms.html")
parse_data_selector_gadget <-
  raw_data |>
  html_element(".wikitable") |>
  html_table()

head(parse_data_selector_gadget)
```

Cleaning column names and keeping only the required column

```{r}
#| echo: false

parsed_data <-
  parse_data_selector_gadget |> 
  clean_names() |> 
  rename(raw_text = name_birth_death_constituency) |> 
  select(raw_text) |> 
  filter(raw_text != "Name(Birth–Death)Constituency") |> 
  distinct() 

head(parsed_data)
```

Separating data into three columns - name, date (birth-death), or born (if currently alive).

```{r}
#| echo: false

initial_clean <-
  parsed_data |>
  separate(
    raw_text, into = c("name", "not_name"), sep = "\\(", extra = "merge",
  ) |> 
  mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
         born = str_extract(not_name, "b.[[:space:]][[:digit:]]{4}")
         ) |>
  select(name, date, born)
  
head(initial_clean)
```

Separating birth years and death years(if there is one) for both currently alive and dead PMs.

```{r}
#| echo: false
#| include: false
cleaned_data <-
  initial_clean |>
  separate(date, into = c("birth", "died"), 
           sep = "–") |>   # PMs who have died have their birth and death years 
  # separated by a hyphen, but we need to be careful with the hyphen as it seems 
  # to be a slightly odd type of hyphen and we need to copy/paste it.
  mutate(
    born = str_remove_all(born, "b.[[:space:]]"),
    birth = if_else(!is.na(born), born, birth)
  ) |> # Alive PMs have slightly different format
  select(-born) |>
  rename(born = birth) |> 
  mutate(across(c(born, died), as.integer)) |> 
  mutate(Age_at_Death = died - born) |> 
  distinct() # Some of the PMs had two goes at it.

head(cleaned_data)
```

Giving columns more readable headers.

```{r}
#| echo: false
#| label: tbl-lifespan_data
#| tbl-cap: Lifespan Data
cleaned_data |>
  head() |>
  kable(
    col.names = c("Prime Minister", "Birth year", "Death year", "Age at death")
    )
```

Plotting the lifespans of all prime ministers:

```{r}
#| echo: false
#| label: fig-pm_lifespans
#| fig-cap: Lifespans of Australian Prime Ministers
cleaned_data |>
  mutate(
    still_alive = if_else(is.na(died), "Yes", "No"),
    died = if_else(is.na(died), as.integer(2023), died)
  ) |>
  mutate(name = as_factor(name)) |>
  ggplot(
    aes(x = born, xend = died, y = name, yend = name, color = still_alive)
    ) +
  geom_segment() +
  labs(
    x = "Year of birth", y = "Prime minister", color = "PM is currently alive"
    ) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom")
```
